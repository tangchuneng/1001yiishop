<?php
namespace backend\controllers;

use yii\helpers\Json;
use yii\web\Controller;
use backend\models\User;
use yii\web\Response;

class ApiController extends Controller
{
    //关闭csrf验证,接口开发必须关闭
    public $enableCsrfValidation = false;
    public $token = 'API_sign20181015';//用于签名,越复杂越好.实际工作中需要前后端每个部门商量好

    //>>该函数类似于构造函数,在构造函数执行完后执行
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //设置响应的格式为 JSON 字符串
        \Yii::$app->response->format = Response::FORMAT_JSON;
    }

    //1.会员
    //-会员注册
    public function actionUserRegister(){
        $request = \Yii::$app->request;
        $result = [
            'error'=>true,
            'msg'=>'', //错误信息 如果有
            'data'=>[],//返回数据
        ];
        if($request->isPost){
            $model = new User();
            $model->username = $request->post('username');
            $model->password = $request->post('password');
            $model->email = $request->post('email');
            $model->status = $request->post('status');
            if($model->validate()){
                $model->save();
                //注册成功
                /*$result = [
                    'error'=>false,
                    'msg'=>'注册成功',
                    'data'=>[],
                ];*/
                $result['error'] = false;
                $result['msg'] = '注册成功';
            }else{
                //验证失败
                /*$result = [
                    'error'=>true,
                    'msg'=>'注册失败,请检测错误信息',
                    'data'=>$model->getErrors(),
                ];*/
                $result['error'] = true;
                $result['msg'] = '注册失败,请检测错误信息';
            }
        }else{
            //不是post提交
            /*$result = [
                'error'=>true,
                'msg'=>'请使用post方式提交数据',
                'data'=>[],
            ];*/
            $result['error'] = true;
            $result['msg'] = '请使用post方式提交数据';
        }
        return $result;
    }
    //-会员登录
    //-修改密码
    //-获取当前登录的用户信息


    //>>测试:接口的安全问题
    public function actionTest(){
        $result = [
            'error'=>true, //有错误
            'sg'=>'', //错误信息 如果有
            'data'=>[],//返回数据
        ];
        $request = \Yii::$app->request;

        //一.对比时间戳 -> 防重防攻击（请求被截获，稍后被重防或多次重防)
        $time = $request->get('time');
        //判断是否有time参数
        if($time){
            //有参数
            if(time()-$time > 60){
                //说明请求参数过期
                $result['msg'] = '请求参数过期';
            }else{
                //二.签名 -> 防篡改攻击,防伪装攻击
                $sign = $request->get('sign');
                if($sign){
                    $data = $request->get();
                    //1.删除传过来的签名,根据其他的数据重新签名
                    unset($data['sign']);
                    //2.排序
                    ksort($data);
                    //3.连接成字符串
                    $str = http_build_query($data);
                    //4.签名 : 连接token md5 大写
                    $sign_new = strtoupper(md5($this->token.$str));
                    //5.比对新的签名和旧的签名
                    if($sign_new == $sign){
                        $result['error'] = false;
                        $result['msg'] = 'test请求成功';
                    }else{
                        $result['msg'] = '签名错误';
                    }
                }else{
                    $result['error'] = true;
                    $result['msg'] = '缺少签名';
                }
            }
        }else{
            //没有参数
            $result['msg'] = '缺少参数';
        }

        return $result;
    }

    //签名的原理
    public function actionSign(){
        $p = ['e'=>3,'g'=>5,'d'=>2,'time'=>6666666666];
        //1.对$p按索引进行升序排列
        ksort($p);
        //var_dump($p);
        //2.将数组拼接成字符串 d=25&e=55&g=23&time=12345678
        $s = http_build_query($p);
        //3.将 token 拼接到字符串前面,然后做 md5 运算,将结果转换为大写
        $sign = strtoupper(md5($this->token.$s));
        var_dump($sign);
    }
}